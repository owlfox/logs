"Section" refers to the first section or subsection in "An Introduction 
to Parallel Programming, 2nd ed" that discusses the program.  "Page" refers 
to the first page in the hard copy of the book.

Section Page    File                    Description
------- ----    ----                    -----------
2.7.1   71      ch2/histogram.c         serial program that constructs 
                                        a histogram

3.1     90      ch3/mpi_hello.c         print a greeting from each MPI 
                                        process
3.2.1   101     ch3/trap.c              serial trapezoidal rule program
3.2.2   102     ch3/mpi_trap1.c         first version of MPI trapezoidal 
                                        rule: a, b, and n are hardwired
                                        rule:  proc 0 reads and distributes
                                        a, b, and n
3.4.2   110     ch3/mpi_trap3.c         third version of MPI trapezoidal
                                        rule:  use MPI_Reduce to compute
                                        global sum and MPI_Bcast to distribute
                                        input data
3.4.6   116     ch3/vector_add.c        serial vector sum
3.4.6   116     ch3/mpi_vector_add.c    MPI vector sum that uses a block
                                        distribution of the vectors.  Also
                                        illustrate use of MPI_Scatter and
                                        MPI_Gather
3.4.9   122     ch3/mat_vect_mult.c     Serial program that multiplies a
                                        matrix by a vector.  Uses a one-
                                        dimensional array for the matrix
3.4.9   122     ch3/mpi_mat_vect_mult.c MPI program that multiplies a
                                        matrix by a vector.  Uses a block
                                        distribution of the vectors and a
                                        block row distribution of the matrix
3.5     123     ch3/mpi_many_msgs.c     Compare the cost of sending one large
                                        message to the cost of sending many
                                        small messages
3.5     125     ch3/mpi_trap4.c         Trapezoidal rule implementation 
                                        that uses a derived datatype for
                                        the distribution of the input data
3.6.1   129     ch3/timer.h             Macro for taking timings in serial
                                        programs
3.6.1   130     ch3/mpi_mat_vect_time.c Matrix vector multiplication program
                                        that reports run-time
3.7.1   135     ch3/bubble.c            Serial bubble sort
3.7.1   136     ch3/odd_even.c          Serial odd-even transposition sort
3.7.2   137     ch3/mpi_odd_even.c      MPI implementation of parallel odd-
                                        even transposition sort


4.2     161     ch4/pth_hello.c         Print a greeting from each thread
4.3     169     ch4/mat_vect_mult.c     Serial matrix-vector multiplication
4.3     169     ch4/pth_mat_vect.c      Pthreads matrix-vector multiplication
4.4     171     ch4/pth_pi.c            Buggy attempt to estimate pi with
                                        pthreads
4.5     175     ch4/pth_pi_busy1.c      First attempt at using busy-waiting
                                        to protect a critical section
4.5     177     ch4/pth_do_nothing.c    Estimate cost of forking and joining
                                        threads
4.5     178     ch4/pth_pi_busy2.c      Second attempt at using busy-waiting
                                        to protect a critical section
4.6     178     ch4/pth_pi_mutex.c      Use a mutex to protect the critical
                                        section in the pi program
4.7     182     ch4/pth_msg.c           Try to send messages among the
                                        threads
4.7     184     ch4/pth_msg_sem.c       Use unnamed semaphores to solve
                                        the synchronization problem in
                                        sending messages
4.7     184     ch4/pth_msg_sem_mac.c   Use named semaphores to solve
                                        the synchronization problem in
                                        sending messages
4.8.1   188     ch4/pth_busy_bar.c      Implement a barrier using busy-
                                        waiting and a mutex
4.8.2   189     ch4/pth_sem_bar.c       Implement a barrier using semaphores
4.8.3   190     ch4/pth_cond_bar.c      Implement a barrier using a condition
                                        condition variable
4.9.1   193     ch4/linked_list.c       A serial linked list program
4.9.2   197     ch4/pth_ll_one_mut.c    A Pthreads linked list program that
                                        uses a single mutex to control access
                                        to the list.
4.9.2   197     ch4/my_rand.c           Thread-safe random number generator
                                        (not discussed in text, but needed
                                        by the pth_ll programs.)
4.9.2   197     ch4/my_rand.h           Header file for thread-safe random 
                                        number generator (not discussed in 
                                        text, but needed by the pth_ll 
                                        programs.)
4.9.2   197     ch4/pth_ll_mult_mut.c   A Pthreads linked list program that
                                        uses one mutex for each list node.
4.9.3   198     ch4/pth_ll_rwl.c        A Pthreads linked list program that
                                        uses read-write locks
4.10    191     ch4/pth_mat_vect.c      Pthreads matrix-vector multiplication
4.11    207     ch4/pth_tokenize.c      Pthreads program that attempts to
                                        tokenize input text with strtok
4.11    209     ch4/pth_tokenize_r.c    Pthreads program that tokenizes
                                        input text with strtok_r


5.1     222     ch5/omp_hello.c         An OpenMP program that prints a 
                                        greeting from each thread
5.1.3   227     ch5/omp_hello_err_chk.c The OpenMP greeting program modified
                                        so that it checks for some errors
                                        and checks whether the compiler
                                        supports OpenMP
5.2     228     ch5/trap.c              Serial trapezoidal rule
5.2.1   229     ch5/omp_trap1.c         First OpenMP implementation of 
                                        trapezoidal rule.  Uses a critical
                                        directive to add threads' subintegrals
5.4     234     ch5/omp_trap2a.c        OpenMP implementation of trapezoidal
                                        rule that uses a hand-coded reduction
                                        after the function call.
5.4     234     ch5/omp_trap2b.c        OpenMP implementation of trapezoidal
                                        rule that uses a reduction clause.
5.5     237     ch5/omp_trap3.c         OpenMP implementation of trapezoidal
                                        rule that uses a parallel for directive
5.5.2   239     ch5/omp_fibo.c          Try to parallelize a loop that computes
                                        the Fibonacci numbers:  this program
                                        has a serious bug.
5.5.4   241     ch5/omp_pi.c            Estimate pi using a parallel for
                                        directive
5.5.4   243     ch5/omp_private.c       Print the value of a private variable
                                        at the beginning of a parallel block
                                        and after a parallel block
5.6.1   245     ch5/bubble.c            Serial bubble sort
5.6.2   246     ch5/odd_even.c          Serial odd-even transposition sort
5.6.2   246     ch5/omp_odd_even1.c     OpenMP implementation of odd-even
                                        transposition sort that uses two
                                        parallel for directives
5.6.2   247     ch5/omp_odd_even2.c     OpenMP implementation of odd-even
                                        transposition sort that uses a
                                        parallel directive and two for
                                        directives
5.7     249     ch5/omp_sin_sum.c       Use a parallel for directive to
                                        parallelize a loop in which the
                                        time per iteration is proportional
                                        to the iteration number
5.8.1   256     ch5/omp_msg/queue.c     Implements a queue of messages
                                        (source + contents) as a linked
                                        list
5.8.1   256     ch5/omp_msg/queue.h     Header file for queue.c
5.8.2   256     ch5/omp_msg/omp_msgps.c Program that passes messages
                                        among threads.  This version uses
                                        critical and atomic directives
                                        to protect critical sections.
5.8.9   262     ch5/omp_msg/queue_lk.c  Linked list queue with OpenMP
                                        locks.
5.8.9   262     ch5/omp_msg/queue_lk.h  Header file for queue_lk.c
5.8.9   262     ch5/omp_msg/omp_msglk.c Program that passes messages
                                        among threads.  This version uses
                                        atomic directive and OpenMP locks
                                        to protect critical sections.
5.9     265     ch5/mat_vect_mult.c     Serial matrix-vector multiplication
5.9     266     ch5/omp_mat_vect.c      Parallelization of matrix-vector
                                        multiplication that uses a parallel
                                        for directive
5.10    271     ch5/serial_fib.c        A serial program that computes n
                                        Fibonacci numbers
5.10    272     ch5/omp_fib_broken1.c   An OpenMP program that attempts to
                                        computes n Fibonacci numbers
5.10    272     ch5/omp_fib_broken2.c   Another OpenMP program that attempts 
                                        to computes n Fibonacci numbers
5.10    272     ch5/omp_fib.c           A program that uses OpenMP tasks
                                        to compute the Fibonacci numbers
5.10    273     timer.h                 header file that uses a macro
                                        to return number of seconds since
                                        some time in the past.
5.10    273     ch5/omp_fib_time.c      A program that uses OpenMP tasks
                                        to compute the Fibonacci numbers.
                                        This version times the computation
                                        and includes some optimizations.
5.11    274     ch5/omp_tokenize.c      OpenMP program that attempts to 
                                        tokenize input with strtok
5.11    276     ch5/pth_tokenize_r.c    OpenMP program that tokenizes
                                        input text with strtok_r


6.4.1   296     ch6/cuda_hello.cu       CUDA program that starts a block
                                        of threads and prints a greeting
                                        from each
6.6     299     ch6/cuda_hello1.cu      CUDA program that can start 
                                        multiple thread blocks and print
                                        a greeting from each.
6.8     302     ch6/cuda_vec_add.cu     CUDA program that adds two vectors
6.8.5   309     ch6/cuda_vec_add_cp.cu  CUDA program that adds two vectors.
                                        This version uses cudaMemcpy to
                                        explicitly transfer data between
                                        host and device
6.9     312     ch6/pass_by_ref1.cu     Attempt to use C pass-by-reference
                                        to return a value from the device
                                        to the host.
6.9     312     ch6/pass_by_ref2.cu     Return a value from the device
                                        to the host using unified memory
6.9     312     ch6/pass_by_ref2_cp.cu  Return a value from the device
                                        to the host using cudaMemcpy
6.9     312     ch6/pass_by_ref2_glbl.cu  Return a value from the 
                                        device to the host using global
                                        managed memory
6.10.1  314     ch6/trap.c              Serial trapezoidal rule
6.10    314     ch6/cuda_trap1.cu       First CUDA implementation of the
                                        trapezoidal rule.  This version
                                        uses atomicAdd to add each thread's
                                        computation into the total estimate
6.11    320     ch6/cuda_trap2a.cu      This CUDA implementation of the
                                        trapezoidal rule uses warp shuffles
                                        to form each thread block's partial
                                        sum.  Thread block size should be
                                        the same as the warp size (currently
                                        32).
6.11    320     ch6/cuda_trap2b.cu      This CUDA implementation of the
                                        trapezoidal rule uses shared memory
                                        sums to form each thread block's 
                                        partial sum.  Thread block size should
                                        be the same as the warp size (currently
                                        32).
6.13    331     ch6/cuda_trap3a.cu      This CUDA implementation of the
                                        trapezoidal rule uses warp
                                        shuffles to form each thread block's
                                        partial sum.  Then the threads
                                        in warp 0 of each block add the 
                                        warp sums
6.13    331     ch6/cuda_trap3b.cu      This CUDA implementation of the
                                        trapezoidal rule uses shared memory
                                        sums to form each thread block's
                                        partial sum.  Then the threads
                                        in warp 0 of each block add the 
                                        warp sums in the block.
6.14.1  338     ch6/serial_bitonic.c    Serial bitonic sort in C.
6.14.3  338     ch6/cuda_bitonic_one.cu CUDA implementation of bitonic
                                        sort that uses a single thread
                                        block
6.14.4  347     ch6/cuda_bitonic_mult.cu CUDA implementation of bitonic
                                        sort that uses multiple thread
                                        blocks


7.1.2   363     ch7/timer.h                 Header file that uses a macro
                                        to return number of seconds since
                                        some time in the past.
7.1.2   363     ch7/nbody_basic.c       Serial implementation of the basic
                                        algorithm for solving an n-body
                                        problem
7.1.2   363     ch7/nbody_red.c         Serial implementation of the reduced
                                        algorithm for solving an n-body
                                        problem
7.1.5   371     ch7/omp_nbody_basic.c   OpenMP implementation of the basic
                                        algorithm for solving an n-body
                                        problem
7.1.6   375     ch7/omp_nbody_red.c     OpenMP implementation of the reduced                                            algorithm for solving an n-body
                                        problem
7.1.8   380     ch7/pth_nbody_basic.c   Pthreads implementation of the
                                        basic algorithm for solving an
                                        an n-body problem
7.1.8   380     ch7/pth_nbody_red.c     Pthreads implementation of the
                                        reduced algorithm for solving an
                                        an n-body problem
7.1.9   381     ch7/mpi_nbody_basic.c   MPI implementation of the basic
                                        algorithm for solving an n-body
                                        problem
7.1.10  383     ch7/mpi_nbody_red.c     MPI implementation of the reduced
                                        algorithm for solving an n-body
                                        problem
Ex 7.10 445     ch7/cyclic_derived.c    Program that uses a derived datatype
                                        for I/O of an array with a cyclic
                                        distribution
7.1.12  390     ch7/set_device.c        Code used by the CUDA programs
                                        in this chapter for specifying
                                        which device should be used in
                                        a multidevice system.  (Can be
                                        ignored if device 0 is OK.)
7.1.12  390     ch7/set_device.h        Header file for set_device.c
7.1.12  390     ch7/stats.c             Code used by the CUDA programs
                                        in this chapter for generating
                                        statistics on multiple executions
                                        of one program.
7.1.12  390     ch7/stats.h             Header file for stats.c
7.1.12  390     ch7/nbody_basic.cu      Implementation of basic n-body
                                        solver using CUDA
7.1.13  390     ch7/nbody_basic_cg.cu   Implementation of basic n-body
                                        solver using CUDA.  This version
                                        uses cooperative groups.
7.1.16  395     ch7/nbody_basic_sm.cu   CUDA basic n-body version that 
                                        uses shared memory.
7.2.1   398     ch7/ssort-basic.c       Serial implementation of the basic
                                        sample sort algorithm
7.2.2   400     ch7/ssort.c             Serial implementation of the sample
                                        sort algorithm that generates a
                                        deterministic sample and uses the
                                        alternative implementation of Map
7.2.6   410     ch7/omp_simple.c        OpenMP implementation of the basic
                                        sample sort algorithm
7.2.6   412     ch7/omp_sample.c        OpenMP implementation of the second
                                        sample sort algorithm
7.2.7   415     ch7/pth_simple.c        Pthreads implementation of the basic
                                        sample sort algorithm
7.2.7   417     ch7/pth_sample.c        Pthreads implementation of the second
                                        sample sort algorithm
7.2.8   418     ch7/mpi-ssort-aa.c      MPI implementation of sample sort 
					that uses a random number generator 
                                        to choose the sample and 
                                        MPI_Alltoallv to redistribute the list
7.2.8   423     ch7/mpi-oe.c            MPI implementation of odd-even 
                                        transposition sort
7.2.8   423     ch7/mpi-oe.h            Header file for mpi-oe.c
7.2.8   423     ch7/mpi-ssort-bfly-st.c MPI implementation of sample sort that
                                        uses a distributed odd-even 
                                        transposition sort to sort the sample
                                        and a hand-coded butterfly 
                                        implementation of Allgatherv.
7.2.9   429     ch7/simple_printf.cu    Source for C I/O functions that 
                                        run on the device. This and the
                                        following four source files are a
                                        kludge to get nvcc to compile 
                                        cuda_ssort1.cu and cuda_ssort2.cu.
7.2.9   429     ch7/simple_printf.h     Header file for print functions that
                                        run on the device.  
7.2.9   429     ch7/stats.cu            The stats code with a cu suffix
7.2.9   429     ch7/set_device.cu       The set_device code with a cu suffix
7.2.9   429     ch7/cuda_ssort1.cu      CUDA implementation of sample sort
                                        that uses a single thread block. 
                                        Host chooses sample and splitters.
7.2.9   434     ch7/cuda_ssort2.cu      CUDA implementation of sample sort
                                        that uses multiple blocks.
